面试套路:
1、业务考察：能讲清楚自己在干啥。
2、基础支持：多线程、hashmap与ConcurrentHashMap、synchronized等。
3、设计模式：跟着业务走，看看业务上适合用什么，可探讨。
4、高并发、分布式缓存设计。
5、线上故障应急、运维能力（如何保障系统稳定，trace、系统监控、业务监控、限流等）。
6、框架掌握程度。
7、技术热情，看书等。
1、线上JAVA系统突然发生CPU飙高，怎么排查.
加分项目，查看调用量是否突然增大，是否需要加机器等。
    a、查询哪个线程占用CPU。 (top\PS)
    b、查看线程的运行情况.  top -HP pid，可以看到详情
    c、使用jstack查看堆栈。
    d、发现是频繁FULLGC，频繁FULLGC可能的原因是什么。
2、DB扛不住压力怎么办？ 上缓存，上单机缓存还是分布式缓存，优缺点，哪种情况适用分布式缓存。
     如果远程缓存还是扛不住怎么办， JVM+远端缓存模式，多机的一致性保障（观察者模式或者订阅模式）。
     还是不行，数据分片，水平拆分。
   
3、设计全局只有一个实例的User类(User.java)






java基础（简单，中级，高级）

list的扩容、hashMap的实现、concurrent包的使用、syncronized、lock，分布式锁，threadlocal，线程池的使用、
事务、mysql的索引、锁、死锁、nio、JVM、JVM案例


用过的中间件的原理、一致性、系统的架构（高可用、稳定性、可扩展、性能优化）、分库分表、系统监控流控
分布式的CAP理论：

编程题目：

背景：组织结构编辑功能

组织结构由群、部门和人员构成，用户可以通过增加、删除来管理组织结构；现在需要一个接口，能够同时获取到增加的列表、删除的列表、不变的列表，

以便于其他的开发人员能够基于这个接口做相应的工作。

例子：

原来的组织结构组成：部门列表：d1，d2,d3,d4 群列表：c1,c2,c3,c4,c5 人员列表：u1,u2,u3
修改后的组织结构组成：部门列表：d2,d4,d5 群列表：c1,c3,c6 人员列表：u4,u5
最终需要的组织结构为：增加的列表：d5,c6,u4,u5

 
删除的列表：d1,d3,c2,c4,c5,u1,u2,u3

 
不变列表：d2,d4,c1,c3
要求：对象自己定义，要充分考虑到代码的规范、可读性、可扩展，接口要让其他的开发人员易用，最好有相应的单元测试
时间：30~60分钟

业务背景

在做什么，负责哪块业务，有什么难点，如何解决，有没有更好的方案，从中学习到了什么。如果规模扩大了，要怎么做？
用了多少时间，如果时间减半，要怎么处理










